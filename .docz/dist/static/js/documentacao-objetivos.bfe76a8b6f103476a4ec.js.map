{"version":3,"sources":["/Users/lucas/Documents/GitHub/documentacao-pages/documentacao/objetivos.mdx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_lucas_Documents_GitHub_documentacao_pages_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","isMDXComponent"],"mappings":"gXAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,aADR,aAGAL,OAAAE,EAAA,EAAAF,CAAA,m2BACAA,OAAAE,EAAA,EAAAF,CAAA,+hCACAA,OAAAE,EAAA,EAAAF,CAAA,gwDACAA,OAAAE,EAAA,EAAAF,CAAA,8tBAIJJ,EAAWU,gBAAiB","file":"static/js/documentacao-objetivos.f79dd029.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"objetivos\"\n    }}>{`Objetivos`}</h1>\n    <p>{`O desenvolvimento de software sempre teve os seus processos alterados ao longo tempo buscando melhor desempenho desde o levantamento de requisitos até a versão em produção. As fábricas de software através dos métodos ágeis conseguiram implementar diversas melhorias no processo, fazendo iterações e realizando a implantação de pequenos módulos para maximizar o ROI (Return on Investiment). Os métodos ágeis possibilitaram otimizações na parte de desenvolvimento e operação, fazendo com que o tempo ocioso fosse mitigado e comparado aos primeiros métodos tradicionais houvesse um ganho de performance. Porém, tais processos possuem diversas falhas do início ao fim do desenvolvimento do software e após ser implantado em produção, fazendo com que a eficiência fosse contestada.`}</p>\n    <p>{`Diversos problemas foram notados durante o ciclo de vida do software. Durante a codificação diversos defeitos podem ser implementados no software, seja por motivos como a falta de conhecimento do desenvolvedor, curto prazo ou requisito incorreto. Caso o defeito seja implementado por conta do requisito incorreto a equipe de QA (Quality Assurance) ou Garantia de Qualidade, irá permitir que este defeito seja passado adiante, podendo ser percebido pela homologação do cliente ou descoberto somente em produção. Para que uma versão de correção seja implementada o processo poderá demorar algumas horas, pois é necessário que a correção seja criada, gerada versão em ambiente de testes e a correção ser testada, gerada a versão em ambiente de homologação e ser aprovada, gerada versão no servidor de produção e aguardar o tempo de reinício do servidor, que em média possui tempo aproximado entre 3 e 10 minutos, fazendo com que grandes prejuízos possam acontecer.`}</p>\n    <p>{`Pensando nesses problemas foi criado o conceito de DevOps, que é a combinação de filosofias culturais, práticas e ferramentas que aumentam a capacidade de uma empresa de distribuir aplicativos e serviços em alta velocidade: otimizando e aperfeiçoando produtos em um ritmo mais rápido do que o das empresas que usam processos tradicionais de desenvolvimento de software e gerenciamento de infraestrutura. Essa velocidade permite que as empresas atendam melhor aos seus clientes e compitam de modo mais eficaz no mercado.. `}{`[AWS Amazon]`}{`. Com a implementação de um modelo de DevOps, as equipes de desenvolvimento e operações não são mais separadas. Com as combinações de filosofia, prática e ferramentas essas duas equipes são combinadas em uma só. Os engenheiros trabalham durante todo o ciclo de vida do software, desde a fase de desenvolvimento e testes à fase de implantação e operações, e desenvolvem várias qualificações não limitadas a uma única função. Para incrementar essa única equipe de engenheiros as partes de controle de qualidade e segurança podem passar a integrar essa única equipe que gira em torno do software. As políticas de DevOps utilizam de práticas para automatizar processos que historicamente sempre foram manuais e lentos. Eles usam uma pilha de tecnologia e ferramentas que os ajudam a operar e desenvolver aplicativos de modo rápido e confiável. Essas ferramentas também ajudam os engenheiros a realizar tarefas independentemente (por exemplo, implantação de código e provisionamento de infraestrutura) que normalmente exigiria a ajuda de outras equipes, fazendo com que a agilidade da equipe cresça. `}{`[AWS Amazon]`}{`.`}</p>\n    <p>{`Filosofias culturais, práticas e ferramentas culminam em benefícios nas áreas de velocidade de operação, entrega rápida de versões, confiabilidade do código em produção, escalabilidade de acordo com a demanda de acessos, colaboração entre pessoas e times e segurança. Tais benefícios são alcançados através de práticas como Integração Contínua, Entrega Contínua, Microsserviços, Infraestrutura como código, Monitoramento e registro e Comunicação e colaboração.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}